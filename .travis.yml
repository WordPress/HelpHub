# Travis CI configuration file.
# @link https://travis-ci.org/

# For use with the HelpHub project

# Declare project language and PHP versions to test against.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use, w.org currently uses 5.6.18, soon to be 7.x
php:
  - 7.1
  - 7.0

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/ci-environment/
sudo: false

# Tell Travis CI which distro to use
dist: trusty
# Travis CI environment matrix
env:
  matrix:
    - WP_VERSION=latest WP_MULTISITE=0
    - WP_VERSION=nightly WP_MULTISITE=0

# Setup NPM modules for Travis CI cache maintanence.
cache:
  directories:
    - $HOME/.npm
    - node_modules
    - vendor
    - $HOME/.composer/cache

before_install:
  - npm prune
  - npm update
  - composer install

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  - |
    # Remove Xdebug for a huge performance increase:
    if [ -f ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ]; then
      phpenv config-rm xdebug.ini
    else
      echo "xdebug.ini does not exist"
    fi
  - which phpunit
  - phpunit --version
  # Install phpunuit test suite
  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Change to the themes folder
  - cd themes
  # Search theme for PHP syntax errors.
  - find . \( -name '*.php' \) -exec php -lf {} \;
  # PHPCS WordPress Coding Standards
  - ../vendor/bin/phpcs -p -s -v -n . --standard=../phpcs.ruleset.xml
  # Change to the plugins folder
  - cd .. && cd plugins
  # Search theme for PHP syntax errors.
  - find . \( -name '*.php' \) -exec php -lf {} \;
  # PHPCS WordPress Coding Standards
  - ../vendor/bin/phpcs -p -s -v -n . --standard=../phpcs.ruleset.xml
  # Setup NodeJS version using NVM
  - node --version
  - npm --version
  - nvm install 8
  - npm --version
  - node --version
  # Install NPM modules
  - npm install
  - npm install -g grunt-cli
  # Run CSS, JS, & PHP Grunt tasks (Temporarily using --force so all tasks run)
  - grunt travis
  # PHPUnit
  - cd .. && vendor/bin/phpunit
